//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: macala.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol GamemoveCall: ClientCallUnary {}

fileprivate final class GamemoveCallBase: ClientCallUnaryBase<Move, Empty>, GamemoveCall {
  override class var method: String { return "/Game/move" }
}

internal protocol GamerestartCall: ClientCallUnary {}

fileprivate final class GamerestartCallBase: ClientCallUnaryBase<Empty, BoolMessage>, GamerestartCall {
  override class var method: String { return "/Game/restart" }
}

internal protocol GamequitCall: ClientCallUnary {}

fileprivate final class GamequitCallBase: ClientCallUnaryBase<Empty, BoolMessage>, GamequitCall {
  override class var method: String { return "/Game/quit" }
}

internal protocol GamesendCall: ClientCallUnary {}

fileprivate final class GamesendCallBase: ClientCallUnaryBase<MessageRpc, Empty>, GamesendCall {
  override class var method: String { return "/Game/send" }
}

internal protocol GamechangeTurnCall: ClientCallUnary {}

fileprivate final class GamechangeTurnCallBase: ClientCallUnaryBase<PlayerTurnRpc, Empty>, GamechangeTurnCall {
  override class var method: String { return "/Game/changeTurn" }
}

internal protocol GamesurrenderCall: ClientCallUnary {}

fileprivate final class GamesurrenderCallBase: ClientCallUnaryBase<PlayerTurnRpc, Empty>, GamesurrenderCall {
  override class var method: String { return "/Game/surrender" }
}

internal protocol GameidentifyPlayerCall: ClientCallUnary {}

fileprivate final class GameidentifyPlayerCallBase: ClientCallUnaryBase<PlayerTurnRpc, PlayerTurnRpc>, GameidentifyPlayerCall {
  override class var method: String { return "/Game/identifyPlayer" }
}

internal protocol GameshowWinnerCall: ClientCallUnary {}

fileprivate final class GameshowWinnerCallBase: ClientCallUnaryBase<PlayerTurnRpc, Empty>, GameshowWinnerCall {
  override class var method: String { return "/Game/showWinner" }
}


/// Instantiate GameServiceClient, then call methods of this protocol to make API calls.
internal protocol GameService: ServiceClient {
  /// Synchronous. Unary.
  func move(_ request: Move, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func move(_ request: Move, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamemoveCall

  /// Synchronous. Unary.
  func restart(_ request: Empty, metadata customMetadata: Metadata) throws -> BoolMessage
  /// Asynchronous. Unary.
  @discardableResult
  func restart(_ request: Empty, metadata customMetadata: Metadata, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamerestartCall

  /// Synchronous. Unary.
  func quit(_ request: Empty, metadata customMetadata: Metadata) throws -> BoolMessage
  /// Asynchronous. Unary.
  @discardableResult
  func quit(_ request: Empty, metadata customMetadata: Metadata, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamequitCall

  /// Synchronous. Unary.
  func send(_ request: MessageRpc, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func send(_ request: MessageRpc, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesendCall

  /// Synchronous. Unary.
  func changeTurn(_ request: PlayerTurnRpc, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func changeTurn(_ request: PlayerTurnRpc, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamechangeTurnCall

  /// Synchronous. Unary.
  func surrender(_ request: PlayerTurnRpc, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func surrender(_ request: PlayerTurnRpc, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesurrenderCall

  /// Synchronous. Unary.
  func identifyPlayer(_ request: PlayerTurnRpc, metadata customMetadata: Metadata) throws -> PlayerTurnRpc
  /// Asynchronous. Unary.
  @discardableResult
  func identifyPlayer(_ request: PlayerTurnRpc, metadata customMetadata: Metadata, completion: @escaping (PlayerTurnRpc?, CallResult) -> Void) throws -> GameidentifyPlayerCall

  /// Synchronous. Unary.
  func showWinner(_ request: PlayerTurnRpc, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func showWinner(_ request: PlayerTurnRpc, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GameshowWinnerCall

}

internal extension GameService {
  /// Synchronous. Unary.
  func move(_ request: Move) throws -> Empty {
    return try self.move(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func move(_ request: Move, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamemoveCall {
    return try self.move(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func restart(_ request: Empty) throws -> BoolMessage {
    return try self.restart(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func restart(_ request: Empty, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamerestartCall {
    return try self.restart(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func quit(_ request: Empty) throws -> BoolMessage {
    return try self.quit(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func quit(_ request: Empty, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamequitCall {
    return try self.quit(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func send(_ request: MessageRpc) throws -> Empty {
    return try self.send(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func send(_ request: MessageRpc, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesendCall {
    return try self.send(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func changeTurn(_ request: PlayerTurnRpc) throws -> Empty {
    return try self.changeTurn(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func changeTurn(_ request: PlayerTurnRpc, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamechangeTurnCall {
    return try self.changeTurn(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func surrender(_ request: PlayerTurnRpc) throws -> Empty {
    return try self.surrender(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func surrender(_ request: PlayerTurnRpc, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesurrenderCall {
    return try self.surrender(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func identifyPlayer(_ request: PlayerTurnRpc) throws -> PlayerTurnRpc {
    return try self.identifyPlayer(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func identifyPlayer(_ request: PlayerTurnRpc, completion: @escaping (PlayerTurnRpc?, CallResult) -> Void) throws -> GameidentifyPlayerCall {
    return try self.identifyPlayer(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func showWinner(_ request: PlayerTurnRpc) throws -> Empty {
    return try self.showWinner(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func showWinner(_ request: PlayerTurnRpc, completion: @escaping (Empty?, CallResult) -> Void) throws -> GameshowWinnerCall {
    return try self.showWinner(request, metadata: self.metadata, completion: completion)
  }

}

internal final class GameServiceClient: ServiceClientBase, GameService {
  /// Synchronous. Unary.
  internal func move(_ request: Move, metadata customMetadata: Metadata) throws -> Empty {
    return try GamemoveCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func move(_ request: Move, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamemoveCall {
    return try GamemoveCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func restart(_ request: Empty, metadata customMetadata: Metadata) throws -> BoolMessage {
    return try GamerestartCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func restart(_ request: Empty, metadata customMetadata: Metadata, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamerestartCall {
    return try GamerestartCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func quit(_ request: Empty, metadata customMetadata: Metadata) throws -> BoolMessage {
    return try GamequitCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func quit(_ request: Empty, metadata customMetadata: Metadata, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamequitCall {
    return try GamequitCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func send(_ request: MessageRpc, metadata customMetadata: Metadata) throws -> Empty {
    return try GamesendCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func send(_ request: MessageRpc, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesendCall {
    return try GamesendCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func changeTurn(_ request: PlayerTurnRpc, metadata customMetadata: Metadata) throws -> Empty {
    return try GamechangeTurnCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func changeTurn(_ request: PlayerTurnRpc, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamechangeTurnCall {
    return try GamechangeTurnCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func surrender(_ request: PlayerTurnRpc, metadata customMetadata: Metadata) throws -> Empty {
    return try GamesurrenderCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func surrender(_ request: PlayerTurnRpc, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesurrenderCall {
    return try GamesurrenderCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func identifyPlayer(_ request: PlayerTurnRpc, metadata customMetadata: Metadata) throws -> PlayerTurnRpc {
    return try GameidentifyPlayerCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func identifyPlayer(_ request: PlayerTurnRpc, metadata customMetadata: Metadata, completion: @escaping (PlayerTurnRpc?, CallResult) -> Void) throws -> GameidentifyPlayerCall {
    return try GameidentifyPlayerCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func showWinner(_ request: PlayerTurnRpc, metadata customMetadata: Metadata) throws -> Empty {
    return try GameshowWinnerCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func showWinner(_ request: PlayerTurnRpc, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GameshowWinnerCall {
    return try GameshowWinnerCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol GameProvider: ServiceProvider {
  func move(request: Move, session: GamemoveSession) throws -> Empty
  func restart(request: Empty, session: GamerestartSession) throws -> BoolMessage
  func quit(request: Empty, session: GamequitSession) throws -> BoolMessage
  func send(request: MessageRpc, session: GamesendSession) throws -> Empty
  func changeTurn(request: PlayerTurnRpc, session: GamechangeTurnSession) throws -> Empty
  func surrender(request: PlayerTurnRpc, session: GamesurrenderSession) throws -> Empty
  func identifyPlayer(request: PlayerTurnRpc, session: GameidentifyPlayerSession) throws -> PlayerTurnRpc
  func showWinner(request: PlayerTurnRpc, session: GameshowWinnerSession) throws -> Empty
}

extension GameProvider {
  internal var serviceName: String { return "Game" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/Game/move":
      return try GamemoveSessionBase(
        handler: handler,
        providerBlock: { try self.move(request: $0, session: $1 as! GamemoveSessionBase) })
          .run()
    case "/Game/restart":
      return try GamerestartSessionBase(
        handler: handler,
        providerBlock: { try self.restart(request: $0, session: $1 as! GamerestartSessionBase) })
          .run()
    case "/Game/quit":
      return try GamequitSessionBase(
        handler: handler,
        providerBlock: { try self.quit(request: $0, session: $1 as! GamequitSessionBase) })
          .run()
    case "/Game/send":
      return try GamesendSessionBase(
        handler: handler,
        providerBlock: { try self.send(request: $0, session: $1 as! GamesendSessionBase) })
          .run()
    case "/Game/changeTurn":
      return try GamechangeTurnSessionBase(
        handler: handler,
        providerBlock: { try self.changeTurn(request: $0, session: $1 as! GamechangeTurnSessionBase) })
          .run()
    case "/Game/surrender":
      return try GamesurrenderSessionBase(
        handler: handler,
        providerBlock: { try self.surrender(request: $0, session: $1 as! GamesurrenderSessionBase) })
          .run()
    case "/Game/identifyPlayer":
      return try GameidentifyPlayerSessionBase(
        handler: handler,
        providerBlock: { try self.identifyPlayer(request: $0, session: $1 as! GameidentifyPlayerSessionBase) })
          .run()
    case "/Game/showWinner":
      return try GameshowWinnerSessionBase(
        handler: handler,
        providerBlock: { try self.showWinner(request: $0, session: $1 as! GameshowWinnerSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol GamemoveSession: ServerSessionUnary {}

fileprivate final class GamemoveSessionBase: ServerSessionUnaryBase<Move, Empty>, GamemoveSession {}

internal protocol GamerestartSession: ServerSessionUnary {}

fileprivate final class GamerestartSessionBase: ServerSessionUnaryBase<Empty, BoolMessage>, GamerestartSession {}

internal protocol GamequitSession: ServerSessionUnary {}

fileprivate final class GamequitSessionBase: ServerSessionUnaryBase<Empty, BoolMessage>, GamequitSession {}

internal protocol GamesendSession: ServerSessionUnary {}

fileprivate final class GamesendSessionBase: ServerSessionUnaryBase<MessageRpc, Empty>, GamesendSession {}

internal protocol GamechangeTurnSession: ServerSessionUnary {}

fileprivate final class GamechangeTurnSessionBase: ServerSessionUnaryBase<PlayerTurnRpc, Empty>, GamechangeTurnSession {}

internal protocol GamesurrenderSession: ServerSessionUnary {}

fileprivate final class GamesurrenderSessionBase: ServerSessionUnaryBase<PlayerTurnRpc, Empty>, GamesurrenderSession {}

internal protocol GameidentifyPlayerSession: ServerSessionUnary {}

fileprivate final class GameidentifyPlayerSessionBase: ServerSessionUnaryBase<PlayerTurnRpc, PlayerTurnRpc>, GameidentifyPlayerSession {}

internal protocol GameshowWinnerSession: ServerSessionUnary {}

fileprivate final class GameshowWinnerSessionBase: ServerSessionUnaryBase<PlayerTurnRpc, Empty>, GameshowWinnerSession {}

